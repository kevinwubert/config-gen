package {{ .PackageName }}

import (
    "flag"
	"fmt"
    "os"
	{{ if or .HasFieldTypes.HasInt .HasFieldTypes.HasBool -}}
	"strconv"
	{{- end }}
	{{- if .HasFieldTypes.HasDuration -}}
	"time"
	{{- end }}
)

func GetConfig(defaultConfig *Config) *Config {
	cfg := &Config{}
	{{ range .Fields -}}
        {{- if eq .Type "string" }}
	flag.StringVar(&cfg.{{ .Name.PascalCase }}, "{{ .Name.KebabCase }}", LookupEnvOrString("{{ .Name.ScreamingSnakeCase }}", defaultConfig.{{ .Name.PascalCase }}), "{{ .Description }}")
        {{- end -}}
        {{- if eq .Type "int" }}
	flag.IntVar(&cfg.{{ .Name.PascalCase }}, "{{ .Name.KebabCase }}", LookupEnvOrInt("{{ .Name.ScreamingSnakeCase }}", defaultConfig.{{ .Name.PascalCase }}), "{{ .Description }}")
        {{- end -}}
        {{- if eq .Type "bool" }}
	flag.BoolVar(&cfg.{{ .Name.PascalCase }}, "{{ .Name.KebabCase }}", LookupEnvOrBool("{{ .Name.ScreamingSnakeCase }}", defaultConfig.{{ .Name.PascalCase }}), "{{ .Description }}")
        {{- end -}}
        {{- if eq .Type "duration" }}
	flag.DurationVar(&cfg.{{ .Name.PascalCase }}, "{{ .Name.KebabCase }}", LookupEnvOrDuration("{{ .Name.ScreamingSnakeCase }}", defaultConfig.{{ .Name.PascalCase }}), "{{ .Description }}")
        {{- end -}}
    {{- end }}
    
	flag.Parse()

	return cfg
}

{{ if .HasFieldTypes.HasString -}}
func LookupEnvOrString(key string, defaultVal string) string {
	if val, ok := os.LookupEnv(key); ok {
		return val
	}
	return defaultVal
}
{{- end }}
{{ if .HasFieldTypes.HasInt -}}
func LookupEnvOrInt(key string, defaultVal int) int {
	if val, ok := os.LookupEnv(key); ok {
		i, err := strconv.Atoi(val)
		if err != nil {
			return defaultVal
		}
		return i
	}
	return defaultVal
}
{{- end }}
{{ if .HasFieldTypes.HasBool -}}
func LookupEnvOrBool(key string, defaultVal bool) bool {
	if val, ok := os.LookupEnv(key); ok {
		b, err := strconv.ParseBool(val)
		if err != nil {
			return defaultVal
		}
		return b
	}
	return defaultVal
}
{{- end }}
{{ if .HasFieldTypes.HasDuration -}}
func LookupEnvOrDuration(key string, defaultVal time.Duration) time.Duration {
	if val, ok := os.LookupEnv(key); ok {
		d, err := time.ParseDuration(val)
		if err != nil {
			return defaultVal
		}
		return d
	}
	return defaultVal
}
{{- end }}

func (cfg *Config) String() string {
	output := "Config {\n"
	{{ range .Fields -}}
		{{- if not .IsSecret }}
			{{- if eq .Type "string" }}
	output += fmt.Sprintf("\t%s: %s,\n", "{{ .Name.PascalCase }}", cfg.{{ .Name.PascalCase }})
			{{- end -}}
			{{- if eq .Type "int" }}
	output += fmt.Sprintf("\t%s: %d,\n", "{{ .Name.PascalCase }}", cfg.{{ .Name.PascalCase }})
			{{- end -}}
			{{- if eq .Type "bool" }}
	output += fmt.Sprintf("\t%s: %t,\n", "{{ .Name.PascalCase }}", cfg.{{ .Name.PascalCase }})
			{{- end -}}
			{{- if eq .Type "duration" }}
	output += fmt.Sprintf("\t%s: %s,\n", "{{ .Name.PascalCase }}", cfg.{{ .Name.PascalCase }}.String())
			{{- end -}}
		{{ end -}}
    {{- end }}

	output += "}"
	
	return output
}
